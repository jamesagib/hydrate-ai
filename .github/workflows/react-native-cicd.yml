name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev-only
          - prod-only
          - both
        default: dev-only
      platform:
        type: choice
        description: "Platform to build"
        default: "ios"
        options:
          - ios
          - android
          - both

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    env:
      PATH: /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$HOME/bin:$HOME/.gem/bin:$PATH
      RUBYOPT: "-W0"
      RUBYZIP_V3_API_WARN: "false"
    steps:
      - name: üîß Verify System Utilities
        run: |
          echo "Checking system utilities..."
          echo "Current PATH: $PATH"
          echo "System info:"
          uname -a
          echo "Checking for tar:"
          which tar || echo "tar not found in PATH"
          echo "Checking for common system utilities:"
          which ls || echo "ls not found"
          which cp || echo "cp not found"
          which mv || echo "mv not found"
          which mkdir || echo "mkdir not found"
          echo "Checking /usr/bin for tar:"
          ls -la /usr/bin/tar || echo "tar not in /usr/bin"
          echo "Checking /bin for tar:"
          ls -la /bin/tar || echo "tar not in /bin"
          
          # Try to fix PATH if needed
          if ! command -v tar &> /dev/null; then
            echo "tar not found, attempting to fix PATH..."
            export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
            echo "Updated PATH: $PATH"
            which tar || echo "tar still not found after PATH update"
            
            # If still not found, try to install it
            if ! command -v tar &> /dev/null; then
              echo "tar still not found, attempting to install..."
              if command -v brew &> /dev/null; then
                arch -arm64 brew install gnu-tar
                export PATH="/opt/homebrew/bin:$PATH"
              else
                echo "Homebrew not available, cannot install tar"
              fi
            fi
          fi
          
          # Final verification
          echo "Final tar verification:"
          if command -v tar &> /dev/null; then
            echo "‚úÖ tar is available at: $(which tar)"
            tar --version || echo "tar version check failed"
          else
            echo "‚ùå tar is still not available"
            exit 1
          fi

      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üèó Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üîß Setup Ruby and Fastlane
        run: |
          # Check architecture and use appropriate approach
          echo "Current architecture: $(uname -m)"
          
          # Use system Ruby and install Fastlane to user directory
          echo "Using system Ruby..."
          
          # Check if system Ruby is available
          if command -v ruby &> /dev/null; then
            echo "System Ruby found: $(which ruby)"
            ruby --version
          else
            echo "‚ùå No Ruby found on system"
            exit 1
          fi
          
          # Set up user gem directory to avoid permission issues
          export GEM_HOME="$HOME/.gem"
          export GEM_PATH="$HOME/.gem"
          export PATH="$GEM_HOME/bin:$PATH"
          
          # Add to shell configuration for persistence
          echo 'export GEM_HOME="$HOME/.gem"' >> ~/.zshrc
          echo 'export GEM_PATH="$HOME/.gem"' >> ~/.zshrc
          echo 'export PATH="$GEM_HOME/bin:$PATH"' >> ~/.zshrc
          
          # Create gem directory if it doesn't exist
          mkdir -p "$GEM_HOME"
          
          # Install Fastlane to user directory with suppressed warnings (only if not cached)
          if ! command -v fastlane &> /dev/null; then
            echo "Installing Fastlane to user directory..."
            RUBYOPT="-W0" gem install fastlane --user-install --no-document
          else
            echo "Fastlane already installed (from cache)"
          fi
          
          # Create symlink in user's bin directory
          echo "Creating Fastlane symlink in user bin..."
          mkdir -p "$HOME/bin"
          ln -sf "$GEM_HOME/bin/fastlane" "$HOME/bin/fastlane"
          
          # Add user bin to PATH
          export PATH="$HOME/bin:$PATH"
          echo 'export PATH="$HOME/bin:$PATH"' >> ~/.zshrc
          
          # Verify installations
          echo "Ruby version:"
          ruby --version
          echo "Ruby location:"
          which ruby
          echo "Fastlane version:"
          fastlane --version
          echo "Fastlane location:"
          which fastlane
          echo "User gem directory:"
          ls -la "$GEM_HOME/bin/" | grep fastlane || echo "Fastlane not in gem bin"
          echo "User bin directory:"
          ls -la "$HOME/bin/" | grep fastlane || echo "Fastlane not in user bin"

      - name: üì¶ Install dependencies
        run: |
          # Configure npm to use HTTPS registry
          npm config set registry https://registry.npmjs.org/
          npm ci
          npm install -g eas-cli@latest

      - name: üì¶ Cache Ruby gems
        uses: actions/cache@v3
        with:
          path: |
            $HOME/.gem
            $HOME/bin
          key: ${{ runner.os }}-ruby-gems-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-ruby-gems-

      - name: üîß Setup Xcode
        run: |
          echo "Current Xcode path:"
          xcode-select -p
          echo "Xcode version:"
          xcodebuild -version
          echo "Setting Xcode path..."
          sudo xcode-select -s /Applications/Xcode.app
          echo "Xcode setup complete"

      - name: üóëÔ∏è Clear EAS Cache
        run: |
          echo "Clearing EAS cache to force fresh credential creation..."
          rm -rf ~/.eas-build-local

      - name: üìÅ Setup Provisioning Profile
        run: |
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 -d > Water_AI_Manually_Created_Profile.mobileprovision
          echo "Provisioning profile created"

      - name: üì± Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: üîÑ Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: üîç Verify Fastlane availability
        run: |
          # Ensure user gem environment is loaded
          export GEM_HOME="$HOME/.gem"
          export PATH="$HOME/bin:$GEM_HOME/bin:$PATH"
          
          echo "Verifying Fastlane is available..."
          if command -v fastlane &> /dev/null; then
            echo "‚úÖ Fastlane is available"
            fastlane --version
            echo "Fastlane location:"
            which fastlane
          else
            echo "‚ùå Fastlane is not available in PATH"
            echo "Current PATH: $PATH"
            echo "Ruby location:"
            which ruby
            echo "Checking user gem directory:"
            ls -la "$HOME/.gem/bin/" | grep fastlane || echo "Fastlane not in gem bin"
            echo "Checking user bin directory:"
            ls -la "$HOME/bin/" | grep fastlane || echo "Fastlane not in user bin"
            exit 1
          fi

      # Build Development (always runs)
      - name: üì± Build iOS Development
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          # Ensure Fastlane is in PATH for EAS build
          export GEM_HOME="$HOME/.gem"
          export PATH="$HOME/bin:$GEM_HOME/bin:$PATH"
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Verify Fastlane is available before building
          echo "Verifying Fastlane availability before EAS build..."
          which fastlane || echo "Fastlane not found in PATH: $PATH"
          
          eas build --platform ios --profile development --local --non-interactive
        env:
          NODE_ENV: development
          PATH: $HOME/bin:$HOME/.gem/bin:$PATH

      - name: üîç Find and Copy Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Looking for development build files..."
          find . -name "*.ipa" -type f
          find . -name "*.app" -type d
          echo "Current directory contents:"
          ls -la
          echo "Copying development build to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-dev.ipa
            echo "Copied to ./app-ios-dev.ipa"
          else
            APP_FILE=$(find . -name "*.app" -type d | head -1)
            if [ -n "$APP_FILE" ]; then
              echo "Found app: $APP_FILE"
              cp -R "$APP_FILE" ./app-ios-dev.app
              echo "Copied to ./app-ios-dev.app"
            else
              echo "No .ipa or .app file found!"
              exit 1
            fi
          fi

      - name: ‚úÖ Verify Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Verifying development build exists..."
          if [ -f "./app-ios-dev.ipa" ]; then
            echo "‚úÖ Development IPA found: ./app-ios-dev.ipa"
            ls -la ./app-ios-dev.ipa
          elif [ -d "./app-ios-dev.app" ]; then
            echo "‚úÖ Development app found: ./app-ios-dev.app"
            ls -la ./app-ios-dev.app
          else
            echo "‚ùå Development build not found!"
            exit 1
          fi

      # Build Production (only when requested)
      - name: üì± Build iOS Production
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          # Ensure Fastlane is in PATH for EAS build
          export GEM_HOME="$HOME/.gem"
          export PATH="$HOME/bin:$GEM_HOME/bin:$PATH"
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Verify Fastlane is available before building
          echo "Verifying Fastlane availability before EAS build..."
          which fastlane || echo "Fastlane not found in PATH: $PATH"
          
          eas build --platform ios --profile production --local --non-interactive
        env:
          NODE_ENV: production
          PATH: $HOME/bin:$HOME/.gem/bin:$PATH

      - name: üîç Find and Copy Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Looking for production IPA files..."
          find . -name "*.ipa" -type f
          echo "Current directory contents:"
          ls -la
          echo "Copying IPA to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-prod.ipa
            echo "Copied to ./app-ios-prod.ipa"
          else
            echo "No IPA file found!"
            exit 1
          fi

      - name: ‚úÖ Verify Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Verifying production IPA file exists..."
          if [ -f "./app-ios-prod.ipa" ]; then
            echo "‚úÖ Production IPA file found: ./app-ios-prod.ipa"
            ls -la ./app-ios-prod.ipa
          else
            echo "‚ùå Production IPA file not found!"
            exit 1
          fi

      - name: üì¶ Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-ios-dev.ipa
            ./app-ios-dev.app
            ./app-ios-prod.ipa
          retention-days: 7
