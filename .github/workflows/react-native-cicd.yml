name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev-only
          - prod-only
          - both
        default: dev-only
      platform:
        type: choice
        description: "Platform to build"
        default: "ios"
        options:
          - ios
          - android
          - both

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    env:
      PATH: /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$PATH
    steps:
      - name: üîß Verify System Utilities
        run: |
          echo "Checking system utilities..."
          echo "Current PATH: $PATH"
          echo "System info:"
          uname -a
          echo "Checking for tar:"
          which tar || echo "tar not found in PATH"
          echo "Checking for common system utilities:"
          which ls || echo "ls not found"
          which cp || echo "cp not found"
          which mv || echo "mv not found"
          which mkdir || echo "mkdir not found"
          echo "Checking /usr/bin for tar:"
          ls -la /usr/bin/tar || echo "tar not in /usr/bin"
          echo "Checking /bin for tar:"
          ls -la /bin/tar || echo "tar not in /bin"
          
          # Try to fix PATH if needed
          if ! command -v tar &> /dev/null; then
            echo "tar not found, attempting to fix PATH..."
            export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
            echo "Updated PATH: $PATH"
            which tar || echo "tar still not found after PATH update"
            
            # If still not found, try to install it
            if ! command -v tar &> /dev/null; then
              echo "tar still not found, attempting to install..."
              if command -v brew &> /dev/null; then
                arch -arm64 brew install gnu-tar
                export PATH="/opt/homebrew/bin:$PATH"
              else
                echo "Homebrew not available, cannot install tar"
              fi
            fi
          fi
          
          # Final verification
          echo "Final tar verification:"
          if command -v tar &> /dev/null; then
            echo "‚úÖ tar is available at: $(which tar)"
            tar --version || echo "tar version check failed"
          else
            echo "‚ùå tar is still not available"
            exit 1
          fi

      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üèó Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üîß Setup Expo CLI
        run: |
          echo "Setting up Expo CLI for local builds..."
          npm install -g @expo/cli@latest
          # Find where npm installed the expo CLI
          echo "npm prefix: $(npm config get prefix)"
          echo "npm global bin: $(npm bin -g)"
          # Add npm global bin to PATH
          export PATH="$(npm bin -g):$PATH"
          echo "Updated PATH: $PATH"
          # Try to find expo in common locations
          which expo || echo "expo not found in PATH"
          ls -la $(npm bin -g)/expo || echo "expo not in npm global bin"
          # Use npx as fallback
          npx expo --version

      - name: üì¶ Install dependencies
        run: |
          # Configure npm to use HTTPS registry
          npm config set registry https://registry.npmjs.org/
          npm ci
          npm install -g eas-cli@latest



      - name: üîß Setup Xcode and CocoaPods
        run: |
          echo "Current Xcode path:"
          xcode-select -p
          echo "Xcode version:"
          xcodebuild -version
          echo "Setting Xcode path..."
          sudo xcode-select -s /Applications/Xcode.app
          echo "Xcode setup complete"
          
          echo "Installing CocoaPods..."
          # Install Homebrew first if not available
          if ! command -v brew &> /dev/null; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install CocoaPods via Homebrew
          echo "Installing CocoaPods via Homebrew..."
          brew install cocoapods
          
          # Verify CocoaPods installation
          if command -v pod &> /dev/null; then
            echo "CocoaPods version:"
            pod --version
          else
            echo "‚ùå CocoaPods installation failed"
            exit 1
          fi

      - name: üóëÔ∏è Clear EAS Cache
        run: |
          echo "Clearing EAS cache to force fresh credential creation..."
          rm -rf ~/.eas-build-local

      - name: üìÅ Setup Provisioning Profile
        run: |
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 -d > Water_AI_Manually_Created_Profile.mobileprovision
          echo "Provisioning profile created"

      - name: üì± Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: üîÑ Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: üîç Verify Expo CLI
        run: |
          echo "Verifying Expo CLI is available..."
          # Try npx expo first (most reliable)
          if npx expo --version &> /dev/null; then
            echo "‚úÖ Expo CLI is available via npx"
            npx expo --version
          elif command -v expo &> /dev/null; then
            echo "‚úÖ Expo CLI is available in PATH"
            expo --version
          else
            echo "‚ùå Expo CLI is not available"
            echo "Trying to install Expo CLI again..."
            npm install -g @expo/cli@latest
            npx expo --version
          fi

      # Build Development (always runs)
      - name: üì± Build iOS Development
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Kill any existing Metro processes
          echo "Cleaning up any existing Metro processes..."
          pkill -f "metro" || echo "No Metro processes found"
          pkill -f "8081" || echo "No processes on port 8081"
          
          # Wait a moment for cleanup
          sleep 2
          
          # Build using Expo run:ios with no-install flag (creates app without hanging)
          echo "Starting iOS development build..."
          npx expo run:ios --configuration Debug --no-install || {
            echo "First build attempt failed, retrying..."
            sleep 5
            npx expo run:ios --configuration Debug --no-install
          }
        env:
          NODE_ENV: development

      - name: üîç Find and Copy Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Looking for development build files..."
          echo "Searching for IPA files:"
          find . -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found"
          echo "Searching for APP files:"
          find . -name "*.app" -type d 2>/dev/null || echo "No APP files found"
          echo "Searching in ios/build directory:"
          find ./ios -name "*.ipa" -o -name "*.app" 2>/dev/null || echo "No files in ios/build"
          echo "Current directory contents:"
          ls -la
          echo "ios directory contents:"
          ls -la ios/ 2>/dev/null || echo "ios directory not found"
          
          echo "Copying development build to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f 2>/dev/null | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-dev.ipa
            echo "Copied to ./app-ios-dev.ipa"
          else
            APP_FILE=$(find . -name "*.app" -type d 2>/dev/null | head -1)
            if [ -n "$APP_FILE" ]; then
              echo "Found app: $APP_FILE"
              cp -R "$APP_FILE" ./app-ios-dev.app
              echo "Copied to ./app-ios-dev.app"
            else
              echo "No .ipa or .app file found!"
              echo "Build may have failed or created files in unexpected location"
              echo "Creating a placeholder file to prevent workflow failure"
              echo "Build completed but no app file found" > ./app-ios-dev-placeholder.txt
              exit 0  # Don't fail the workflow, just warn
            fi
          fi

      - name: ‚úÖ Verify Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Verifying development build exists..."
          if [ -f "./app-ios-dev.ipa" ]; then
            echo "‚úÖ Development IPA found: ./app-ios-dev.ipa"
            ls -la ./app-ios-dev.ipa
          elif [ -d "./app-ios-dev.app" ]; then
            echo "‚úÖ Development app found: ./app-ios-dev.app"
            ls -la ./app-ios-dev.app
          else
            echo "‚ùå Development build not found!"
            exit 1
          fi

      # Build Production (only when requested)
      - name: üì± Build iOS Production
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Kill any existing Metro processes
          echo "Cleaning up any existing Metro processes..."
          pkill -f "metro" || echo "No Metro processes found"
          pkill -f "8081" || echo "No processes on port 8081"
          
          # Wait a moment for cleanup
          sleep 2
          
          # Build using Expo run:ios with no-install flag (creates app without hanging)
          echo "Starting iOS production build..."
          npx expo run:ios --configuration Release --no-install || {
            echo "First build attempt failed, retrying..."
            sleep 5
            npx expo run:ios --configuration Release --no-install
          }
        env:
          NODE_ENV: production

      - name: üîç Find and Copy Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Looking for production IPA files..."
          find . -name "*.ipa" -type f
          echo "Current directory contents:"
          ls -la
          echo "Copying IPA to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-prod.ipa
            echo "Copied to ./app-ios-prod.ipa"
          else
            echo "No IPA file found!"
            exit 1
          fi

      - name: ‚úÖ Verify Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Verifying production IPA file exists..."
          if [ -f "./app-ios-prod.ipa" ]; then
            echo "‚úÖ Production IPA file found: ./app-ios-prod.ipa"
            ls -la ./app-ios-prod.ipa
          else
            echo "‚ùå Production IPA file not found!"
            exit 1
          fi

      - name: üì¶ Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-ios-dev.ipa
            ./app-ios-dev.app
            ./app-ios-prod.ipa
          retention-days: 7
