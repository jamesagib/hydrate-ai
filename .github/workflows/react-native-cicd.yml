name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev
          - prod-apk
          - prod-aab
          - ios-dev
          - ios-prod
          - publish-stores
          - all
      platform:
        type: choice
        description: "Platform to build"
        default: "all"
        options:
          - android
          - ios
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  build-and-deploy:
    needs: check-skip
    runs-on: macos-latest
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üèó Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üì¶ Install dependencies
        run: |
          npm ci
          npm install -g eas-cli@latest
      - name: üîß Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: üóëÔ∏è Clear EAS Cache
        run: |
          echo "Clearing EAS cache to force fresh credential creation..."
          rm -rf ~/.eas-build-local
          echo "Clearing npm cache..."
          npm cache clean --force
          echo "Clearing expo cache..."
          npx expo install --fix
      - name: üìÅ Setup Provisioning Profile
        run: |
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 -d > Water_AI_Manually_Created_Profile.mobileprovision
          echo "Provisioning profile created"
      

      - name: üì± Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-
      - name: üîÑ Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version
      
      - name: üîî Verify Push Notification Configuration
        run: |
          echo "=== PUSH NOTIFICATION CONFIGURATION ==="
          echo "Checking iOS entitlements..."
          if [ -f "ios/HydrateAI/HydrateAI.entitlements" ]; then
            echo "‚úÖ Entitlements file found"
            cat ios/HydrateAI/HydrateAI.entitlements
          else
            echo "‚ùå Entitlements file not found!"
            exit 1
          fi
          echo "Checking app.json configuration..."
          echo "Expo notifications plugin:"
          node -e "
            const appJson = require('./app.json');
            const plugins = appJson.expo.plugins || [];
            const notificationsPlugin = plugins.find(p => 
              typeof p === 'string' ? p === 'expo-notifications' : p[0] === 'expo-notifications'
            );
            console.log(notificationsPlugin ? '‚úÖ expo-notifications plugin found' : '‚ùå expo-notifications plugin not found');
          "
          echo "EXPO_PROJECT_ID: $EXPO_PROJECT_ID"
          echo "======================================"
      
      # - name: üìã Show Build Info
      #   run: |
      #     echo "=== BUILD INFORMATION ==="
      #     echo "App version: $(node -p "require('./app.json').expo.version")"
      #     echo "App name: $(node -p "require('./app.json').expo.name")"
      #     echo "Bundle ID: $(node -p "require('./app.json').expo.ios.bundleIdentifier")"
      #     echo "Build profile: development"
      #     echo "Platform: iOS"
      #     echo "=========================="
      # - name: üì± Build iOS Development
      #   run: |
      #     export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
      #     eas build --platform ios --profile development --local --non-interactive
      #   env:
      #     NODE_ENV: development

      # - name: üîç Find and Copy Development Build
      #   run: |
      #     echo "Looking for development build files..."
      #     find . -name "*.ipa" -type f
      #     find . -name "*.app" -type d
      #     echo "Current directory contents:"
      #     ls -la
      #     echo "Copying development build to expected location..."
      #     # First try to find .ipa file (most common for development builds)
      #     IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
      #     if [ -n "$IPA_FILE" ]; then
      #       echo "Found IPA: $IPA_FILE"
      #       cp "$IPA_FILE" ./app-ios-dev.ipa
      #       echo "Copied to ./app-ios-dev.ipa"
      #     else
      #       # Fallback to .app file
      #       APP_FILE=$(find . -name "*.app" -type d | head -1)
      #       if [ -n "$APP_FILE" ]; then
      #         echo "Found app: $APP_FILE"
      #         cp -R "$APP_FILE" ./app-ios-dev.app
      #         echo "Copied to ./app-ios-dev.app"
      #       else
      #         echo "No .ipa or .app file found!"
      #         exit 1
      #       fi
      #     fi
      # - name: ‚úÖ Verify Development Build
      #   run: |
      #     echo "Verifying development build exists..."
      #     if [ -f "./app-ios-dev.ipa" ]; then
      #       echo "‚úÖ Development IPA found: ./app-ios-dev.ipa"
      #       ls -la ./app-ios-dev.ipa
      #     elif [ -d "./app-ios-dev.app" ]; then
      #       echo "‚úÖ Development app found: ./app-ios-dev.app"
      #       ls -la ./app-ios-dev.app
      #     else
      #       echo "‚ùå Development build not found!"
      #       exit 1
      #     fi
      
      - name: üìã Show Production Build Info
        run: |
          echo "=== PRODUCTION BUILD INFORMATION ==="
          echo "App version: $(node -p "require('./app.json').expo.version")"
          echo "App name: $(node -p "require('./app.json').expo.name")"
          echo "Bundle ID: $(node -p "require('./app.json').expo.ios.bundleIdentifier")"
          echo "Build profile: production"
          echo "Platform: iOS"
          echo "This is the build that will be uploaded to App Store"
          echo "================================================"
          echo ""
          echo "=== VERIFYING VERSION FILE ==="
          cat app.json | grep -A 1 -B 1 "version"
          echo "================================="
      
      - name: üîß Auto-Increment Build Number
        run: |
          echo "Auto-incrementing build number..."
          # Read current build number from app.json or default to 15
          node -e "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            if (!appJson.expo.ios) appJson.expo.ios = {};
            
            // Get current build number or default to 15
            const currentBuild = appJson.expo.ios.buildNumber || '15';
            const nextBuild = (parseInt(currentBuild) + 1).toString();
            
            appJson.expo.ios.buildNumber = nextBuild;
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
            console.log('Updated app.json with build number ' + nextBuild);
          "
          echo "Updated app.json:"
          cat app.json | grep -A 2 -B 2 "buildNumber"
      
      - name: üì± Build iOS Production
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform ios --profile production --local --non-interactive
        env:
          NODE_ENV: production

      - name: üîç Find and Copy IPA File
        run: |
          echo "Looking for IPA files..."
          find . -name "*.ipa" -type f
          echo "Current directory contents:"
          ls -la
          echo "Copying IPA to expected location..."
          # Find the IPA file and copy it to the expected location
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-prod.ipa
            echo "Copied to ./app-ios-prod.ipa"
          else
            echo "No IPA file found!"
            exit 1
          fi
      - name: ‚úÖ Verify IPA File
        run: |
          echo "Verifying IPA file exists..."
          if [ -f "./app-ios-prod.ipa" ]; then
            echo "‚úÖ IPA file found: ./app-ios-prod.ipa"
            ls -la ./app-ios-prod.ipa
          else
            echo "‚ùå IPA file not found!"
            exit 1
          fi
      # - name: üöÄ Submit to App Store
      #   run: |
      #     # Clear any API key environment variables that might interfere
      #     unset APP_STORE_CONNECT_API_KEY
      #     unset APP_STORE_CONNECT_API_KEY_ID
      #     unset APP_STORE_CONNECT_ISSUER_ID
      #     eas submit -p ios --path ./app-ios-prod.ipa --non-interactive
      #   env:
      #     EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      #     EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
      #     EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
      #     EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}

      - name: üì¶ Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-ios-prod.ipa
          retention-days: 7
