name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev-only
          - prod-only
          - both
        default: dev-only
      platform:
        type: choice
        description: "Platform to build"
        default: "ios"
        options:
          - ios
          - android
          - both

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    env:
      PATH: /usr/local/bin:$HOME/.gem/bin:$PATH
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üèó Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üîß Setup Ruby and Fastlane
        run: |
          # Force ARM64 execution for all commands
          export ARCHFLAGS="-arch arm64"
          
          # Check architecture and set up Homebrew path
          echo "Current architecture: $(uname -m)"
          
          # Check if Homebrew is installed
          if ! command -v brew &> /dev/null; then
            echo "Homebrew not found, installing..."
            arch -arm64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          
          echo "Homebrew location: $(which brew)"
          
          # Set up Homebrew path for ARM64
          if [[ $(uname -m) == "arm64" ]]; then
            echo "Running on ARM64, using /opt/homebrew"
            export PATH="/opt/homebrew/bin:$PATH"
            echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc
          fi
          
          # Install rbenv for Ruby version management
          echo "Installing rbenv..."
          arch -arm64 brew install rbenv ruby-build
          
          # Initialize rbenv with ARM64
          echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.zshrc
          echo 'eval "$(rbenv init -)"' >> ~/.zshrc
          source ~/.zshrc
          
          # Try to install Ruby 3.2.2 with ARM64 flags
          echo "Installing Ruby 3.2.2..."
          arch -arm64 rbenv install 3.2.2
          
          if [ $? -ne 0 ]; then
            echo "Ruby 3.2.2 installation failed, trying Ruby 3.1.4..."
            arch -arm64 rbenv install 3.1.4
            
            if [ $? -ne 0 ]; then
              echo "Ruby installation failed, trying system Ruby with user gems..."
              # Use system Ruby but install gems to user directory
              export GEM_HOME="$HOME/.gem"
              export PATH="$GEM_HOME/bin:$PATH"
              echo 'export GEM_HOME="$HOME/.gem"' >> ~/.zshrc
              echo 'export PATH="$GEM_HOME/bin:$PATH"' >> ~/.zshrc
            else
              rbenv global 3.1.4
            fi
          else
            rbenv global 3.2.2
          fi
          
          # Reload shell to use new Ruby
          eval "$(rbenv init -)"
          
          # Install Fastlane using user's Ruby
          echo "Installing Fastlane..."
          arch -arm64 gem install fastlane
          
          # Create symlink to make Fastlane available system-wide
          echo "Creating Fastlane symlink for system-wide access..."
          sudo ln -sf "$(which fastlane)" /usr/local/bin/fastlane
          
          # Also add to PATH for current session and future steps
          export PATH="/usr/local/bin:$HOME/.gem/bin:$PATH"
          echo 'export PATH="/usr/local/bin:$HOME/.gem/bin:$PATH"' >> ~/.zshrc
          
          # Verify installations
          echo "Ruby version:"
          arch -arm64 ruby --version
          echo "Ruby location:"
          which ruby
          echo "Fastlane version:"
          arch -arm64 fastlane --version
          echo "Fastlane location:"
          which fastlane
          echo "System-wide Fastlane symlink:"
          ls -la /usr/local/bin/fastlane || echo "Symlink not found"
          echo "Testing system-wide Fastlane:"
          /usr/local/bin/fastlane --version || echo "System-wide Fastlane not working"

      - name: üì¶ Install dependencies
        run: |
          # Configure npm to use HTTPS registry
          npm config set registry https://registry.npmjs.org/
          npm ci
          npm install -g eas-cli@latest

      - name: üîß Setup Xcode
        run: |
          echo "Current Xcode path:"
          xcode-select -p
          echo "Xcode version:"
          xcodebuild -version
          echo "Setting Xcode path..."
          sudo xcode-select -s /Applications/Xcode.app
          echo "Xcode setup complete"

      - name: üóëÔ∏è Clear EAS Cache
        run: |
          echo "Clearing EAS cache to force fresh credential creation..."
          rm -rf ~/.eas-build-local

      - name: üìÅ Setup Provisioning Profile
        run: |
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 -d > Water_AI_Manually_Created_Profile.mobileprovision
          echo "Provisioning profile created"

      - name: üì± Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: üîÑ Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: üîç Verify Fastlane availability
        run: |
          # Ensure rbenv is loaded
          eval "$(rbenv init -)"
          
          echo "Verifying Fastlane is available..."
          if command -v fastlane &> /dev/null; then
            echo "‚úÖ Fastlane is available"
            arch -arm64 fastlane --version
            echo "Fastlane location:"
            which fastlane
          else
            echo "‚ùå Fastlane is not available in PATH"
            echo "Current PATH: $PATH"
            echo "Ruby location:"
            which ruby
            exit 1
          fi

      # Build Development (always runs)
      - name: üì± Build iOS Development
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          # Ensure Fastlane is in PATH for EAS build
          export PATH="/usr/local/bin:$HOME/.gem/bin:$PATH"
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Verify Fastlane is available before building
          echo "Verifying Fastlane availability before EAS build..."
          which fastlane || echo "Fastlane not found in PATH: $PATH"
          
          eas build --platform ios --profile development --local --non-interactive
        env:
          NODE_ENV: development
          PATH: /usr/local/bin:$HOME/.gem/bin:$PATH

      - name: üîç Find and Copy Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Looking for development build files..."
          find . -name "*.ipa" -type f
          find . -name "*.app" -type d
          echo "Current directory contents:"
          ls -la
          echo "Copying development build to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-dev.ipa
            echo "Copied to ./app-ios-dev.ipa"
          else
            APP_FILE=$(find . -name "*.app" -type d | head -1)
            if [ -n "$APP_FILE" ]; then
              echo "Found app: $APP_FILE"
              cp -R "$APP_FILE" ./app-ios-dev.app
              echo "Copied to ./app-ios-dev.app"
            else
              echo "No .ipa or .app file found!"
              exit 1
            fi
          fi

      - name: ‚úÖ Verify Development Build
        if: ${{ github.event.inputs.buildType != 'prod-only' }}
        run: |
          echo "Verifying development build exists..."
          if [ -f "./app-ios-dev.ipa" ]; then
            echo "‚úÖ Development IPA found: ./app-ios-dev.ipa"
            ls -la ./app-ios-dev.ipa
          elif [ -d "./app-ios-dev.app" ]; then
            echo "‚úÖ Development app found: ./app-ios-dev.app"
            ls -la ./app-ios-dev.app
          else
            echo "‚ùå Development build not found!"
            exit 1
          fi

      # Build Production (only when requested)
      - name: üì± Build iOS Production
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          # Ensure Fastlane is in PATH for EAS build
          export PATH="/usr/local/bin:$HOME/.gem/bin:$PATH"
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          
          # Verify Fastlane is available before building
          echo "Verifying Fastlane availability before EAS build..."
          which fastlane || echo "Fastlane not found in PATH: $PATH"
          
          eas build --platform ios --profile production --local --non-interactive
        env:
          NODE_ENV: production
          PATH: /usr/local/bin:$HOME/.gem/bin:$PATH

      - name: üîç Find and Copy Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Looking for production IPA files..."
          find . -name "*.ipa" -type f
          echo "Current directory contents:"
          ls -la
          echo "Copying IPA to expected location..."
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./app-ios-prod.ipa
            echo "Copied to ./app-ios-prod.ipa"
          else
            echo "No IPA file found!"
            exit 1
          fi

      - name: ‚úÖ Verify Production IPA
        if: ${{ github.event.inputs.buildType == 'prod-only' || github.event.inputs.buildType == 'both' }}
        run: |
          echo "Verifying production IPA file exists..."
          if [ -f "./app-ios-prod.ipa" ]; then
            echo "‚úÖ Production IPA file found: ./app-ios-prod.ipa"
            ls -la ./app-ios-prod.ipa
          else
            echo "‚ùå Production IPA file not found!"
            exit 1
          fi

      - name: üì¶ Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-ios-dev.ipa
            ./app-ios-dev.app
            ./app-ios-prod.ipa
          retention-days: 7
